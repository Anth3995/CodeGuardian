plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '1.2.1'
}

group = 'io.github.alexeytereshchenko.guardian'
version = '1.2.0'

dependencies {
    implementation 'net.ltgt.errorprone:net.ltgt.errorprone.gradle.plugin:3.0.1'
}

repositories {
    mavenCentral()
    mavenLocal()
    gradlePluginPortal()
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit Jupiter test framework
            useJUnitJupiter('5.9.3')
        }

        // Create a new test suite
        functionalTest(JvmTestSuite) {
            dependencies {
                // functionalTest test suite depends on the production code in tests
                implementation project()
            }

            targets {
                all {
                    // This test suite should run after the built-in test suite has run its tests
                    testTask.configure { shouldRunAfter(test) }
                }
            }
        }
    }
}

gradlePlugin {
    website = 'https://github.com/alexeytereshchenko/CodeGuardian'
    vcsUrl = 'https://github.com/alexeytereshchenko/CodeGuardian'

    plugins {
        guardian {
            displayName = 'CodeGuardian'
            description = 'This Gradle plugin is an aggregator that configures Error Prone and CheckStyle, aiming to reduce boilerplate code and ensure consistent quality across projects. It automatically applies Git hooks to run tests and builds before each push, enhancing code reliability and development workflow.'
            tags = ['code', 'errorprone', 'codeStyle', 'style', 'checkstyle', 'quality']

            id = 'io.github.alexeytereshchenko.guardian'
            implementationClass = 'io.github.alexeytereshchenko.guardian.GuardianPlugin'
        }
    }
}

gradlePlugin.testSourceSets.add(sourceSets.functionalTest)
